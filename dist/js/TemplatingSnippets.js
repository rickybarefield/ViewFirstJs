// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    var TemplatingSnippets, bind, bindParts;
    bindParts = function(surroundingContent, nodes) {
      var at, child, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        child = nodes[_i];
        at = $(child).attr("data-at");
        if (at != null) {
          _results.push(bind(surroundingContent, child.childNodes, at));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    bind = function(surroundingContent, html, at) {
      var bindElement;
      bindElement = surroundingContent.find("[data-bind-name='" + at + "']");
      return bindElement.replaceWith(html);
    };
    TemplatingSnippets = {
      surround: function(node, argumentMap) {
        var at, nodes, surroundingContent, surroundingName, surroundingView;
        nodes = node.contents();
        console.log("_surroundSnippet invoked with " + node);
        surroundingName = argumentMap['with'];
        at = argumentMap['at'];
        surroundingView = this.views[surroundingName];
        if (surroundingView == null) {
          throw "Unable to find surrounding view '" + surroundingName + "'";
        }
        surroundingContent = $("<div>" + surroundingView + "</div>");
        if (at != null) {
          bind(surroundingContent, nodes, at);
        } else {
          bindParts(surroundingContent, nodes);
        }
        return surroundingContent.contents();
      },
      embed: function(html, argumentMap) {
        var embeddedView, templateName;
        templateName = argumentMap['view'];
        embeddedView = this.views[templateName];
        if (embeddedView == null) {
          throw "Unable to find template to embed '" + templateName + "'";
        }
        return $("<div>" + embeddedView + "</div>").contents();
      }
    };
    return TemplatingSnippets;
  });

}).call(this);

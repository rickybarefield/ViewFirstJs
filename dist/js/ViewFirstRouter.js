// Generated by CoffeeScript 1.4.0
(function() {

  define(["ViewFirstModel"], function(ViewFirstModel) {
    var ViewFirstRouter;
    return ViewFirstRouter = (function() {
      var deriveNamedModelString, handleBackButton;

      function ViewFirstRouter(viewFirst) {
        this.viewFirst = viewFirst;
        this.baseUrl = location.protocol + '//' + location.host + location.pathname;
      }

      handleBackButton = function(state) {
        return alert(state);
      };

      ViewFirstRouter.prototype.initialize = function() {
        return window.addEventListener("popstate", handleBackButton);
      };

      deriveNamedModelString = function(namedModels) {
        var container, name, namedModelStrings;
        namedModelStrings = (function() {
          var _results;
          _results = [];
          for (name in namedModels) {
            container = namedModels[name];
            if (container.model.isPersisted()) {
              _results.push("" + name + "=" + container.model.constructor.modelName + "!" + (container.model.get("id")));
            }
          }
          return _results;
        })();
        if (namedModelStrings != null) {
          return namedModelStrings.join("|");
        }
      };

      ViewFirstRouter.prototype.update = function() {
        var namedModelString;
        namedModelString = deriveNamedModelString(this.viewFirst.namedModels);
        if (namedModelString != null) {
          namedModelString = "|" + namedModelString;
        }
        return history.pushState(null, null, "" + this.baseUrl + "#" + this.viewFirst.currentView + namedModelString);
      };

      /*
      
          addRoute: (pageName, index = false) =>
        
            createRegex = (pageName) -> new RegExp("^#{pageName}/?([/A-Za-z!0-9]*)$")
        
            routingFunction = (serializedModels) =>
              console.log "Routing to #{pageName}"
              @currentPage = pageName
              @viewFirst.namedModels = {}
              @viewFirst.renderView pageName
        
              if serializedModels? and serializedModels != ""
                for serializedModel in serializedModels.split("/")
                  do (serializedModel) =>
                    serializedParts = serializedModel.split ("!")
                    clazz = window[serializedParts[1]]
                    id = parseInt(serializedParts[2])
                    model = if clazz.findOrCreate? then clazz.findOrCreate({id: id}) else new clazz({id: id})
                    model.fetch
                      success: => @viewFirst.setNamedModel(serializedParts[0], model, true)
                    console.log model.get("description") + "with id: " + model.get("id")
                  
            console.log "Adding a route to #{pageName}"
        
            @route(createRegex(pageName), pageName, routingFunction)
            if index then @route("", "index", =>
              console.log "navy"
              @navigate pageName, true)
        
          updateState: =>
        
            namedModels = @viewFirst.namedModels
            modelsSerialized = for key of namedModels when namedModels[key].id?
              do (key) ->
                "/#{key}!#{namedModels[key].constructor.name}!#{namedModels[key].id}"
        
            url = @currentPage + modelsSerialized.join("")
            @navigate url
      */


      return ViewFirstRouter;

    })();
  });

}).call(this);

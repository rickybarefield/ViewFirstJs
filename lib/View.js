// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.View = (function() {

    View.TEXT_NODE = 3;

    function View(viewFirst, viewId, element) {
      this.viewFirst = viewFirst;
      this.viewId = viewId;
      this.element = element;
      this.getElement = __bind(this.getElement, this);

      this.applySnippets = __bind(this.applySnippets, this);

    }

    View.prototype.render = function() {
      var wrapped;
      wrapped = document.createElement("div");
      wrapped.innerHTML = "<div id=\"boom\">" + this.element + "</div>";
      this.applySnippetsRecursively(wrapped, wrapped.firstChild);
      return wrapped.firstChild.childNodes;
    };

    View.prototype.applySnippetsRecursively = function(parent, domNode, attributes) {
      if (attributes == null) {
        attributes = {
          a: "b"
        };
      }
      if ((domNode != null ? domNode.nodeType : void 0) !== View.TEXT_NODE) {
        return this.applySnippetsRecursivelyToNonTextNode(parent, domNode, attributes);
      } else {
        return domNode;
      }
    };

    View.prototype.applySnippetsRecursivelyToChildNodes = function(parent, childNodes, attributes) {
      var combinedAttributes, key, node, parentsData, _i, _len, _results,
        _this = this;
      combinedAttributes = new __extends(Object, attributes);
      parentsData = $(parent).data();
      for (key in parentsData) {
        combinedAttributes[key] = parentsData[key];
      }
      if (childNodes != null) {
        _results = [];
        for (_i = 0, _len = childNodes.length; _i < _len; _i++) {
          node = childNodes[_i];
          _results.push((function(node) {
            return _this.applySnippetsRecursively(parent, node, combinedAttributes);
          })(node));
        }
        return _results;
      }
    };

    View.prototype.applySnippetsRecursivelyToNonTextNode = function(parent, domNode, attributes) {
      var withSnippetsApplied;
      withSnippetsApplied = this.applySnippets(domNode, attributes);
      if ((withSnippetsApplied != null) && domNode !== withSnippetsApplied) {
        withSnippetsApplied = ViewFirst.replaceNode(parent, domNode, withSnippetsApplied);
        if (ViewFirst.isNodeListOrArray(withSnippetsApplied)) {
          return this.applySnippetsRecursivelyToChildNodes(parent, withSnippetsApplied, attributes);
        } else {
          return this.applySnippetsRecursively(parent, withSnippetsApplied, attributes);
        }
      } else {
        return this.applySnippetsRecursivelyToChildNodes(domNode, domNode != null ? domNode.childNodes : void 0, attributes);
      }
    };

    View.prototype.applySnippets = function(element, attributes) {
      var node, snippetFunc, snippetName;
      node = $(element);
      snippetName = node.attr('data-snippet');
      if (snippetName != null) {
        console.log("snippet usage found for " + snippetName);
        snippetFunc = this.viewFirst.snippets[snippetName];
        if (snippetFunc == null) {
          throw "Unable to find snippet '" + snippetName + "'";
        }
        node.removeAttr("data-snippet");
        return snippetFunc(this.viewFirst, element, node.data());
      } else {
        return element;
      }
    };

    View.prototype.getElement = function() {
      return this.element;
    };

    return View;

  })();

}).call(this);

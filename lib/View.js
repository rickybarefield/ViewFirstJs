// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.View = (function() {

    View.TEXT_NODE = 3;

    function View(viewFirst, viewId, element) {
      this.viewFirst = viewFirst;
      this.viewId = viewId;
      this.element = element;
      this.getElement = __bind(this.getElement, this);

      this.applySnippetsToNodesCombiningAttributes = __bind(this.applySnippetsToNodesCombiningAttributes, this);

      this.applySnippetsToChildNodes = __bind(this.applySnippetsToChildNodes, this);

      this.applySnippets = __bind(this.applySnippets, this);

    }

    View.prototype.render = function() {
      var applySnippetsCaptured, element, node, nodes, _i, _len, _results;
      nodes = $(this.element);
      applySnippetsCaptured = this.applySnippets;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        element = nodes[_i];
        node = $(element);
        _results.push(applySnippetsCaptured(node, node.data()));
      }
      return _results;
    };

    View.prototype.applySnippets = function(node, attributes) {
      var nodeAfterSnippetApplied, snippetFunc, snippetName;
      snippetName = node.attr('data-snippet');
      if (snippetName != null) {
        console.log("snippet usage found for " + snippetName);
        snippetFunc = this.viewFirst.snippets[snippetName];
        if (snippetFunc == null) {
          throw "Unable to find snippet '" + snippetName + "'";
        }
        node.removeAttr("data-snippet");
        nodeAfterSnippetApplied = snippetFunc(this.viewFirst, node, attributes);
        if (nodeAfterSnippetApplied === null) {
          node.detach();
        } else {
          if (node !== nodeAfterSnippetApplied) {
            node.replaceWith(nodeAfterSnippetApplied);
          }
          node = this.applySnippetsToNodesCombiningAttributes(nodeAfterSnippetApplied, attributes);
        }
      } else {
        this.applySnippetsToChildNodes(node, attributes);
      }
      return node;
    };

    View.prototype.applySnippetsToChildNodes = function(node, attributes) {
      var childNodes;
      childNodes = node.contents();
      this.applySnippetsToNodesCombiningAttributes(childNodes, attributes);
      return node;
    };

    View.prototype.applySnippetsToNodesCombiningAttributes = function(nodes, attributesFromParent) {
      var applySnippetsCaptured, childNode, combinedAttributes, element, key, _i, _len;
      applySnippetsCaptured = this.applySnippets;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        element = nodes[_i];
        childNode = $(element);
        combinedAttributes = new __extends(Object, childNode.data());
        for (key in attributesFromParent) {
          combinedAttributes[key] = attributesFromParent[key];
        }
        applySnippetsCaptured(childNode, combinedAttributes);
      }
      return nodes;
    };

    View.prototype.getElement = function() {
      return this.element;
    };

    return View;

  })();

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var BindHelpers, TemplatingSnippets, ViewFirst, ViewFirstModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ViewFirstModel = (function(_super) {

    __extends(ViewFirstModel, _super);

    ViewFirstModel.instances = {};

    function ViewFirstModel(attributes) {
      var instances, model;
      instances = this.constructor.instances;
      if ((attributes != null ? attributes.id : void 0) != null) {
        if (instances[attributes.id] != null) {
          console.log("returning an existing instance");
          model = instances[attributes.id];
          Backbone.Model.apply(model, arguments);
          return model;
        }
        instances[attributes.id] = this;
      }
      Backbone.Model.apply(this, arguments);
    }

    return ViewFirstModel;

  })(Backbone.Model);

  TemplatingSnippets = (function() {

    function TemplatingSnippets() {}

    TemplatingSnippets.add = function(viewFirst) {
      viewFirst.addSnippet("surround", this.surroundSnippet);
      return viewFirst.addSnippet("embed", this.embedSnippet);
    };

    TemplatingSnippets.surroundSnippet = function(viewFirst, node, argumentMap) {
      var at, nodes, surroundingContent, surroundingName, surroundingView;
      nodes = node.contents();
      console.log("_surroundSnippet invoked with " + node);
      surroundingName = argumentMap['with'];
      at = argumentMap['at'];
      surroundingView = viewFirst.findView(surroundingName);
      if (surroundingView == null) {
        throw "Unable to find surrounding template '" + surroundingName + "'";
      }
      surroundingContent = $(surroundingView.getElement());
      if (at != null) {
        TemplatingSnippets.bind(surroundingContent, nodes, at);
      } else {
        TemplatingSnippets.bindParts(surroundingContent, nodes);
      }
      return surroundingContent;
    };

    TemplatingSnippets.bindParts = function(surroundingContent, nodes) {
      var at, child, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        child = nodes[_i];
        at = $(child).attr("data-at");
        if (at != null) {
          _results.push(this.bind(surroundingContent, child.childNodes, at));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    TemplatingSnippets.bind = function(surroundingContent, html, at) {
      var bindElement;
      bindElement = surroundingContent.find("[data-bind-name='" + at + "']");
      return bindElement.replaceWith(html);
    };

    TemplatingSnippets.embedSnippet = function(viewFirst, html, argumentMap) {
      var embeddedView, templateName;
      templateName = argumentMap['template'];
      embeddedView = viewFirst.findView(templateName);
      if (embeddedView == null) {
        throw "Unable to find template to embed '" + templateName + "'";
      }
      return $(embeddedView.getElement()).clone();
    };

    return TemplatingSnippets;

  }).call(this);

  BindHelpers = (function() {
    var uniqueNumber,
      _this = this;

    function BindHelpers() {}

    uniqueNumber = function() {
      if (BindHelpers.lastNumber != null) {
        BindHelpers.lastNumber++;
      } else {
        BindHelpers.lastNumber = 1;
      }
      return BindHelpers.lastNumber;
    };

    BindHelpers.prototype.bindCollection = function(collection, parentNode, func) {
      var $parent, addChild, boundModels, context, removeChild,
        _this = this;
      boundModels = {};
      addChild = function(modelToAdd) {
        var childNode;
        console.log("adding child");
        childNode = func(modelToAdd);
        if (childNode != null) {
          _this.bindNodes(childNode, modelToAdd);
          _this.bindNodeValues(childNode, modelToAdd);
          $parent.append(childNode);
          return boundModels[modelToAdd["cid"]] = childNode;
        }
      };
      removeChild = function(modelToRemove) {
        var childNode;
        childNode = boundModels[modelToRemove["cid"]];
        $(childNode).detach();
        return delete boundModels[modelToRemove["cid"]];
      };
      $parent = $(parentNode);
      context = uniqueNumber();
      console.log("context = " + context);
      collection.each(function(model) {
        return addChild(model);
      });
      collection.on("add", (function(newModel) {
        return addChild(newModel);
      }), context);
      collection.on("remove", (function(removedModel) {
        return removeChild(removedModel);
      }), context);
      return collection.on("reset", (function() {
        collection.off(null, null, context);
        return _this.bindCollection(collection, parentNode, func);
      }), context);
    };

    BindHelpers.prototype.bindNodeToResultOfFunction = function(node, func) {
      var affectingModel, affectingModels, previouslyBoundFunction, previouslyBoundModel, previouslyBoundModels, _i, _j, _len, _len1;
      previouslyBoundModels = node.get(0)["previouslyBoundModels"];
      previouslyBoundFunction = node.get(0)["previouslyBoundFunction"];
      affectingModels = func();
      if (previouslyBoundModels != null) {
        for (_i = 0, _len = previouslyBoundModels.length; _i < _len; _i++) {
          previouslyBoundModel = previouslyBoundModels[_i];
          previouslyBoundModel.off("change", currentlyBoundFunction);
        }
      }
      for (_j = 0, _len1 = affectingModels.length; _j < _len1; _j++) {
        affectingModel = affectingModels[_j];
        affectingModel.on("change", func);
      }
      node.get(0)["previouslyBoundModels"] = affectingModels;
      return node.get(0)["previouslyBoundFunction"] = func;
    };

    BindHelpers.prototype.bindNodes = function(node, model) {
      var _this = this;
      return BindHelpers.doForNodeAndChildren(node, function(node) {
        var doReplacement, getReplacementTextAndAffecingModels, originalText;
        getReplacementTextAndAffecingModels = function(nodeText, model) {
          var affectingModels, removeSurround, replacementText;
          removeSurround = function(str) {
            return str.match(/[^#{}]+/)[0];
          };
          affectingModels = [];
          replacementText = nodeText.replace(/#\{[^\}]*\}/g, function(match) {
            var currentModel, element, elements, key, oldModel, _i, _len;
            key = removeSurround(match);
            elements = key.split(".");
            currentModel = model;
            for (_i = 0, _len = elements.length; _i < _len; _i++) {
              element = elements[_i];
              oldModel = currentModel;
              currentModel = currentModel != null ? currentModel.get(element) : void 0;
            }
            affectingModels.push(oldModel);
            return currentModel;
          });
          return [replacementText, affectingModels];
        };
        originalText = node.get(0).nodeValue;
        doReplacement = function() {
          var affectingModels, replacementText, _ref;
          _ref = getReplacementTextAndAffecingModels(originalText, model), replacementText = _ref[0], affectingModels = _ref[1];
          node.get(0).nodeValue = replacementText;
          return affectingModels;
        };
        if ((node.get(0).nodeType === ViewFirst.TEXT_NODE || node.get(0).nodeType === ViewFirst.ATTR_NODE) && originalText.match(/#{.*}/)) {
          return _this.bindNodeToResultOfFunction(node, doReplacement);
        }
      });
    };

    BindHelpers.prototype.bindNodeValues = function(node, model, collections) {
      var _this = this;
      if (collections == null) {
        collections = {};
      }
      return BindHelpers.doForNodeAndChildren(node, function(aNode) {
        var collection, collectionName, optionSelected, optionTemplate, property;
        property = aNode.attr("data-property");
        if (property != null) {
          if (aNode.is("select")) {
            collectionName = aNode.attr("data-collection");
            collection = collections[collectionName];
            if (collection == null) {
              throw "Unable to find collection when binding node values of select element, failed to find " + property;
            }
            optionTemplate = aNode.children("option");
            optionTemplate.detach();
            optionSelected = false;
            _this.bindCollection(collection, aNode, function(modelInCollection) {
              var optionNode;
              optionNode = optionTemplate.clone();
              if (!optionSelected) {
                optionNode.attr('selected', 'selected');
              }
              optionSelected = true;
              optionNode.get(0)["relatedModel"] = modelInCollection;
              aNode.change();
              return optionNode;
            });
            aNode.off("change.viewFirst");
            aNode.on("change.viewFirst", function() {
              var selectedOption;
              selectedOption = $(this).find("option:selected").get(0);
              if (selectedOption != null) {
                return model.set(property, selectedOption["relatedModel"]);
              } else {
                return model.set(property, null);
              }
            });
            return aNode.change();
          } else {
            _this.bindNodeToResultOfFunction(aNode, function() {
              aNode.val(model.get(property));
              return model;
            });
            aNode.off("keypress.viewFirst");
            aNode.on("keypress.viewFirst", function(e) {
              if ((e.keyCode || e.which) === 13) {
                model.set(property, aNode.val());
                if (!model.isNew()) {
                  return model.save();
                }
              }
            });
            aNode.off("blur.viewFirst");
            aNode.on("blur.viewFirst", function() {
              model.set(property, aNode.val());
              if (!model.isNew()) {
                return model.save();
              }
            });
            return aNode.val(model.get(property));
          }
        }
      });
    };

    BindHelpers.doForNodeAndChildren = function(node, func) {
      var attribute, attributes, childNode, _i, _j, _len, _len1, _ref, _results;
      func(node);
      attributes = node.get(0).attributes;
      if (attributes != null) {
        for (_i = 0, _len = attributes.length; _i < _len; _i++) {
          attribute = attributes[_i];
          func($(attribute));
        }
      }
      _ref = node.contents();
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        childNode = _ref[_j];
        _results.push(BindHelpers.doForNodeAndChildren($(childNode), func));
      }
      return _results;
    };

    return BindHelpers;

  }).call(this);

  ViewFirst = (function(_super) {

    __extends(ViewFirst, _super);

    ViewFirst.TEXT_NODE = 3;

    ViewFirst.ATTR_NODE = 2;

    /*
        namedModelEventListeners contain a map of namedModel name to array of event handlers
    */


    function ViewFirst(indexView, views, namedModels, namedModelEventListeners, router, snippets) {
      this.indexView = indexView;
      this.views = views != null ? views : {};
      this.namedModels = namedModels != null ? namedModels : {};
      this.namedModelEventListeners = namedModelEventListeners != null ? namedModelEventListeners : {};
      this.router = router != null ? router : new ViewFirstRouter(this);
      this.snippets = snippets != null ? snippets : {};
      TemplatingSnippets.add(this);
    }

    ViewFirst.prototype.initialize = function() {
      var _this = this;
      $('script[type="text/view-first-template"]').each(function(id, el) {
        var node, viewName;
        node = $(el);
        console.log("Loading script with id=" + (node.attr('name')));
        viewName = node.attr("name");
        _this.createView(viewName, node.html());
        return _this.router.addRoute(viewName, viewName === _this.indexView);
      });
      return Backbone.history.start();
    };

    ViewFirst.prototype.findView = function(viewId) {
      return this.views[viewId];
    };

    ViewFirst.prototype.renderView = function(viewId) {
      var rendered, view;
      this.currentView = viewId;
      view = this.findView(viewId);
      rendered = view.render();
      return $('body').html(rendered);
    };

    ViewFirst.prototype.navigate = function(viewId) {
      return Backbone.history.navigate(viewId, true);
    };

    ViewFirst.prototype.createView = function(viewId, content) {
      var view;
      view = new View(this, viewId, content);
      this.views[viewId] = view;
      return view;
    };

    ViewFirst.prototype.addSnippet = function(name, func) {
      return this.snippets[name] = func;
    };

    ViewFirst.prototype.setNamedModel = function(name, model, dontSerialize) {
      var eventListenerArray, func, oldModel, _i, _len, _results,
        _this = this;
      if (dontSerialize == null) {
        dontSerialize = false;
      }
      oldModel = this.namedModels[name];
      if (model != null) {
        this.namedModels[name] = model;
        model.constructor.bind("destroy", function() {
          return _this.setNamedModel(name, null);
        });
      } else {
        delete this.namedModels[name];
      }
      console.log("named model set");
      if (!dontSerialize) {
        this.router.updateState();
      }
      eventListenerArray = this.namedModelEventListeners[name];
      if (eventListenerArray != null) {
        _results = [];
        for (_i = 0, _len = eventListenerArray.length; _i < _len; _i++) {
          func = eventListenerArray[_i];
          _results.push(func(oldModel, model));
        }
        return _results;
      }
    };

    ViewFirst.prototype.addNamedModelEventListener = function(name, func) {
      var eventListenerArray;
      eventListenerArray = this.namedModelEventListeners[name];
      if (eventListenerArray == null) {
        eventListenerArray = [];
        this.namedModelEventListeners[name] = eventListenerArray;
      }
      return eventListenerArray.push(func);
    };

    return ViewFirst;

  })(BindHelpers);

  window.ViewFirst = ViewFirst;

  window.ViewFirstModel = ViewFirstModel;

}).call(this);

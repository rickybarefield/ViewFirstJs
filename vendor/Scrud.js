!function(e){"object"==typeof exports?module.exports=e():"function"==typeof define&&define.amd?define(e):"undefined"!=typeof window?window.Scrud=e():"undefined"!=typeof global?global.Scrud=e():"undefined"!=typeof self&&(self.Scrud=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var Create, Scrud, Subscribe,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Create = require("./ScrudCreate");

  Subscribe = require("./ScrudSubscribe");

  module.exports = Scrud = (function() {
    var generateClientId, receiveMessage;

    generateClientId = function() {
      this.currentClientId++;
      return "cId-" + this.currentClientId;
    };

    function Scrud(websocketAddress) {
      var GenerateProxyConstructor, self;
      this.websocketAddress = websocketAddress;
      this.send = __bind(this.send, this);

      this.connect = __bind(this.connect, this);

      self = this;
      this.clientIdMap = {};
      this.currentClientId = 1;
      GenerateProxyConstructor = function(Type) {
        var func;
        func = function() {
          var clientId;
          Type.apply(this, arguments);
          this.Scrud = self;
          clientId = generateClientId.call(self);
          this.clientId = clientId;
          self.clientIdMap[clientId] = this;
          return this;
        };
        func.prototype = Type.prototype;
        return func;
      };
      this.Create = GenerateProxyConstructor(Create);
      this.Subscribe = GenerateProxyConstructor(Subscribe);
    }

    receiveMessage = function(message) {
      var json, messagesClientId;
      json = JSON.parse(message);
      messagesClientId = json['client-id'];
      return this.clientIdMap[messagesClientId][json['message-type']](json);
    };

    Scrud.prototype.connect = function(onOpenCallback) {
      var self;
      self = this;
      this.websocket = new WebSocket(this.websocketAddress);
      this.websocket.onopen = onOpenCallback;
      return this.websocket.onmessage = function() {
        return receiveMessage.apply(self, arguments);
      };
    };

    Scrud.prototype.send = function(object) {
      return this.websocket.send(JSON.stringify(object));
    };

    return Scrud;

  })();

}).call(this);

},{"./ScrudCreate":2,"./ScrudSubscribe":5}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var CreateSuccess, ScrudCreate,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CreateSuccess = require("./ScrudCreateSuccess");

  module.exports = ScrudCreate = (function() {

    function ScrudCreate(resourceType, resource) {
      this.resourceType = resourceType;
      this.resource = resource;
      this['create-success'] = __bind(this['create-success'], this);

      this.send = __bind(this.send, this);

    }

    ScrudCreate.prototype.send = function(onSuccessFunction) {
      var message;
      this.onSuccessFunction = onSuccessFunction;
      message = {
        "message-type": "create",
        "client-id": this.clientId,
        "resource-type": this.resourceType,
        "resource": this.resource
      };
      return this.Scrud.send(message);
    };

    ScrudCreate.prototype['create-success'] = function(message) {
      return this.onSuccessFunction.call(this, new CreateSuccess(message["resource-id"], message["resource"]));
    };

    return ScrudCreate;

  })();

}).call(this);

},{"./ScrudCreateSuccess":3}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var ScrudCreateSuccess;

  module.exports = ScrudCreateSuccess = (function() {

    function ScrudCreateSuccess(resourceId, resource) {
      this.resourceId = resourceId;
      this.resource = resource;
    }

    return ScrudCreateSuccess;

  })();

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var ScrudCreated;

  module.exports = ScrudCreated = (function() {

    function ScrudCreated(resourceId, resource) {
      this.resourceId = resourceId;
      this.resource = resource;
    }

    return ScrudCreated;

  })();

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var Created, ScrudSubscribe, SubscriptionSuccess,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SubscriptionSuccess = require("./ScrudSubscriptionSuccess");

  Created = require("./ScrudCreated");

  module.exports = ScrudSubscribe = (function() {

    function ScrudSubscribe(resourceType, onSuccessFunction) {
      this.resourceType = resourceType;
      this.onSuccessFunction = onSuccessFunction;
      this.send = __bind(this.send, this);

    }

    ScrudSubscribe.prototype.send = function(onSuccess, onCreated) {
      var message;
      this.onSuccess = onSuccess;
      this.onCreated = onCreated;
      message = {
        "message-type": "subscribe",
        "client-id": this.clientId,
        "resource-type": this.resourceType,
        "resource": this.resource
      };
      return this.Scrud.send(message);
    };

    ScrudSubscribe.prototype['subscription-success'] = function(message) {
      return this.onSuccess.call(this, new SubscriptionSuccess(message["resources"]));
    };

    ScrudSubscribe.prototype['created'] = function(message) {
      return this.onCreated.call(this, new Created(message['resource-id'], message.resource));
    };

    return ScrudSubscribe;

  })();

}).call(this);

},{"./ScrudCreated":4,"./ScrudSubscriptionSuccess":6}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var ScrudSubscriptionSuccess;

  module.exports = ScrudSubscriptionSuccess = (function() {

    function ScrudSubscriptionSuccess(resources) {
      this.resources = resources;
    }

    return ScrudSubscriptionSuccess;

  })();

}).call(this);

},{}]},{},[1])
(1)
});
;
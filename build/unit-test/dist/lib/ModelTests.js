// Generated by CoffeeScript 1.3.3
(function() {
  var House, Postman, Room, assert, expect;

  expect = require("./expect.js");

  assert = new expect.Assertion;

  House = require("./House");

  Room = require("./Room");

  Postman = require("./Postman");

  suite('ViewFirst Model Tests', function() {
    var aHouse, bedroom, createHouse, expectedBedroomJson, expectedHouseJson, expectedKitchenJson, expectedPostmanJson, fred, kitchen;
    aHouse = {};
    kitchen = {};
    bedroom = {};
    fred = {};
    expectedKitchenJson = {};
    expectedBedroomJson = {};
    expectedPostmanJson = {};
    expectedHouseJson = {};
    createHouse = function() {
      aHouse = new House();
      kitchen = new Room();
      bedroom = new Room();
      fred = new Postman();
      fred.set("name", "Fred");
      fred.set("id", 99);
      fred.set("dob", new Date(2013, 1, 1));
      bedroom.set("colour", "Pink");
      bedroom.set("size", 4);
      kitchen.set("colour", "White");
      kitchen.set("size", 12);
      aHouse.set("doorNumber", 23);
      aHouse.set("postman", fred);
      aHouse.add("rooms", bedroom);
      aHouse.add("rooms", kitchen);
      expectedKitchenJson = {
        "colour": "White",
        "size": 12
      };
      expectedBedroomJson = {
        "colour": "Pink",
        "size": 4
      };
      expectedPostmanJson = {
        "id": 99
      };
      return expectedHouseJson = {
        "doorNumber": 23,
        "postman": expectedPostmanJson,
        "rooms": [expectedBedroomJson, expectedKitchenJson]
      };
    };
    setup(function() {
      House.instances = [];
      House.instancesById = {};
      Room.instances = [];
      Room.instancesById = {};
      Postman.instances = [];
      Postman.instancesById = {};
      return createHouse();
    });
    suite('Loading models', function() {
      test('A model with only simple properties can be loaded', function() {
        var bathroom, bathroomJson;
        bathroomJson = {
          colour: "blue",
          size: 6,
          id: 74
        };
        bathroom = Room.load(bathroomJson);
        expect(bathroom.get("colour")).to.equal("blue");
        expect(bathroom.get("size")).to.equal(6);
        return expect(bathroom.get("id")).to.equal(74);
      });
      return test('When a model is loaded which already exists, the existing model should be updated and returned', function() {
        var bathroom, bathroomChanged, bathroomChangedJson, bathroomJson;
        bathroomJson = {
          colour: "blue",
          size: 6,
          id: 74
        };
        bathroom = Room.load(bathroomJson);
        bathroomChangedJson = {
          colour: "grey",
          size: 6,
          id: 74
        };
        bathroomChanged = Room.load(bathroomChangedJson);
        expect(bathroomChanged).to.equal(bathroom);
        return expect(bathroom.get("colour")).to.equal("grey");
      });
    });
    suite('JSON creation', function() {
      test('The JSON from a model with only basic properties', function() {
        return expect(kitchen.asJson()).to.eql(expectedKitchenJson);
      });
      return test('A more complex model with OneToMany and ManyToOne relationships', function() {
        return expect(aHouse.asJson()).to.eql(expectedHouseJson);
      });
    });
    suite('Saving a new object', function() {
      test('Saving a model with only basic properties', function() {
        kitchen.save();
        expect(requests.length).to.equal(1);
        expect(requests[0].url).to.equal("/rooms");
        expect(requests[0].requestBody).to.eql(JSON.stringify(expectedKitchenJson));
        expect(requests[0].method).to.equal("POST");
        requests[0].respond(201, {
          "Content-Type": "application/json"
        }, JSON.stringify(cloneWithId(expectedKitchenJson, 13)));
        return expect(kitchen.get("id")).to.equal(13);
      });
      test('Saving a more complex model with OneToMany and ManyToOne relationships', function() {
        var toReturn;
        expect(aHouse.get("id")).to.equal(null);
        expect(bedroom.get("id")).to.equal(null);
        expect(kitchen.get("id")).to.equal(null);
        aHouse.save();
        expect(requests.length).to.equal(1);
        expect(requests[0].url).to.equal("/houses");
        expect(JSON.parse(requests[0].requestBody)).to.eql(expectedHouseJson);
        toReturn = cloneWithId(expectedHouseJson, 1);
        toReturn.rooms[0].id = 2;
        toReturn.rooms[1].id = 3;
        requests[0].respond(201, {
          "Content-Type": "application/json"
        }, JSON.stringify(toReturn));
        expect(aHouse.get("id")).to.equal(1);
        expect(bedroom.get("id")).to.equal(2);
        return expect(kitchen.get("id")).to.equal(3);
      });
      return test('Additional properties should be passed through to AJAX invocation', function() {
        kitchen.save({
          async: false
        });
        return expect(requests[0].async).to.equal(false);
      });
    });
    suite('Updating and Deleting an object and persisting those changes', function() {
      var initiallySaveTheHouse;
      initiallySaveTheHouse = function() {
        var toReturn;
        toReturn = cloneWithId(expectedHouseJson, 1);
        toReturn.rooms[0].id = 2;
        toReturn.rooms[1].id = 3;
        aHouse.save();
        return requests[0].respond(201, {
          "Content-Type": "application/json"
        }, JSON.stringify(toReturn));
      };
      test('Basic changed attributes are sent in a PUT request', function() {
        var expectedJson;
        initiallySaveTheHouse();
        aHouse.set("doorNumber", 99);
        expectedJson = {
          id: 1,
          doorNumber: 99
        };
        aHouse.save();
        expect(requests[1].url).to.equal("/houses/1");
        expect(requests[1].method).to.equal("PUT");
        return expect(JSON.parse(requests[1].requestBody)).to.eql(expectedJson);
      });
      test('Additional properties should be passed through to AJAX invocation', function() {
        kitchen.save({
          async: false
        });
        return expect(requests[0].async).to.equal(false);
      });
      return test('Deleting a model creates a DELETE request', function() {
        initiallySaveTheHouse();
        aHouse["delete"]();
        expect(requests[1].url).to.equal("/houses/1");
        return expect(requests[1].method).to.equal("DELETE");
      });
    });
    return suite('Events are fired by models', function() {
      return test('When a property changes a change event should be fired with the old and new value of the property', function() {
        var changeCalled;
        changeCalled = false;
        aHouse.onPropertyChange("doorNumber", function(oldValue, newValue) {
          expect(oldValue).to.equal(23);
          expect(newValue).to.equal(12);
          return changeCalled = true;
        });
        aHouse.set("postman", new Postman());
        expect(changeCalled).to.equal(false);
        aHouse.set("doorNumber", 12);
        return expect(changeCalled).to.equal(true);
      });
    });
  });

}).call(this);

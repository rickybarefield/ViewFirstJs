// Generated by CoffeeScript 1.3.3
(function() {
  var Scrud, Sync,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scrud = require("Scrud");

  module.exports = Sync = (function() {
    var forwardJson;

    function Sync(url) {
      this.url = url;
      this.connectCollection = __bind(this.connectCollection, this);

      this.persist = __bind(this.persist, this);

      this.Scrud = new Scrud(this.url);
    }

    Sync.prototype.connect = function(callbackFunc) {
      return this.Scrud.connect(callbackFunc);
    };

    forwardJson = function(successFunc) {
      var forwardingJson;
      return forwardingJson = function(scrudMessage) {
        return successFunc(scrudMessage.resource);
      };
    };

    Sync.prototype.persist = function(modelType, json, successFunc) {
      var createMessage;
      createMessage = new this.Scrud.Create(modelType.modelName, json);
      return createMessage.send(forwardJson(successFunc));
    };

    Sync.prototype.connectCollection = function(collection, modelType, callbackFunctions) {
      var onCreated, onSuccess, subscribeMessage;
      onSuccess = function(subscriptionSuccess) {
        var id, resource, _ref, _results;
        _ref = subscriptionSuccess.resources;
        _results = [];
        for (id in _ref) {
          resource = _ref[id];
          _results.push(callbackFunctions.create(resource));
        }
        return _results;
      };
      onCreated = function(created) {
        return callbackFunctions.create(created.resource);
      };
      subscribeMessage = new this.Scrud.Subscribe(modelType, onSuccess);
      return subscribeMessage.send(onSuccess, onCreated);
    };

    return Sync;

  })();

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var $, BindHelpers, ManyToOne, ModelContainer, OneToMany, Sync, TemplatingSnippets, ViewFirst, ViewFirstConverters, ViewFirstModel, ViewFirstRouter, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ViewFirstModel = require("./ViewFirstModel");

  ViewFirstRouter = require("./ViewFirstRouter");

  ModelContainer = require("./ViewFirstModelContainer");

  BindHelpers = require("./BindHelpers");

  TemplatingSnippets = require("./TemplatingSnippets");

  OneToMany = require("./OneToMany");

  ManyToOne = require("./ManyToOne");

  ViewFirstConverters = require("./ViewFirstConverters");

  Sync = require("./ScrudSync");

  $ = require("./jquery-dep");

  _ = require("./underscore-dep");

  module.exports = ViewFirst = (function(_super) {
    var Models, OriginalExtend, addViews;

    __extends(ViewFirst, _super);

    ViewFirst.prototype._target = "body";

    Models = [];

    ViewFirst.Model = ViewFirstModel;

    OriginalExtend = ViewFirst.Model.extend;

    ViewFirst.Model.extend = function(Child) {
      var Extended;
      Extended = OriginalExtend.call(this, Child);
      Models.push(Extended);
      return Extended;
    };

    ViewFirst.OneToMany = OneToMany;

    ViewFirst.ManyToOne = ManyToOne;

    ViewFirst.prototype.dateFormat = "DD/MM/YYYY";

    function ViewFirst(url) {
      this.combine = __bind(this.combine, this);

      this.applySnippetsToSingleNodeAndChildren = __bind(this.applySnippetsToSingleNodeAndChildren, this);

      this.applySnippets = __bind(this.applySnippets, this);

      this.initialize = __bind(this.initialize, this);

      var AModel, key, sync, value, _fn, _i, _len,
        _this = this;
      sync = new Sync(url);
      this.sync = sync;
      _fn = function(AModel) {
        var constructor;
        constructor = function() {};
        constructor = function() {
          this.constructor = constructor;
          AModel.apply(this, arguments);
          return this;
        };
        _.extend(constructor, AModel);
        constructor.prototype = AModel.prototype;
        constructor.instances = [];
        constructor.sync = sync;
        constructor.instancesById = {};
        return _this[AModel.modelName] = constructor;
      };
      for (_i = 0, _len = Models.length; _i < _len; _i++) {
        AModel = Models[_i];
        _fn(AModel);
      }
      this.views = {};
      this.namedModels = {};
      this.snippets = {};
      this.router = new ViewFirstRouter(this);
      for (key in TemplatingSnippets) {
        value = TemplatingSnippets[key];
        this.addSnippet(key, value);
      }
      ViewFirstConverters(this);
    }

    addViews = function() {
      var _this = this;
      return $('script[type="text/view-first-template"]').each(function(id, el) {
        var node, viewName;
        node = $(el);
        viewName = node.attr("name");
        return _this.views[viewName] = node.html();
      });
    };

    ViewFirst.prototype.initialize = function(callback) {
      this.router.initialize();
      this.sync.connect(callback);
      return addViews.call(this);
    };

    ViewFirst.prototype.render = function(viewId) {
      var inflated, viewElement;
      this.currentView = viewId;
      viewElement = this.views[viewId];
      if (viewElement == null) {
        throw "Unable to find view: " + viewId;
      }
      inflated = this.inflate(viewElement);
      this.router.update();
      return $(this._target).html(inflated);
    };

    ViewFirst.prototype.refresh = function() {
      return this.router.refresh();
    };

    ViewFirst.prototype.addSnippet = function(name, func) {
      return this.snippets[name] = func;
    };

    ViewFirst.prototype.setNamedModel = function(name, model, dontSerialize) {
      var modelContainer;
      if (dontSerialize == null) {
        dontSerialize = false;
      }
      if (this.namedModels[name] == null) {
        this.namedModels[name] = new ModelContainer();
      }
      modelContainer = this.namedModels[name];
      modelContainer.set(model);
      return this.router.update();
    };

    ViewFirst.prototype.getNamedModel = function(name) {
      var modelContainer;
      modelContainer = this.namedModels[name];
      if (modelContainer != null) {
        return modelContainer.model;
      } else {
        return null;
      }
    };

    ViewFirst.prototype.onNamedModelChange = function(name, func) {
      var modelContainer;
      if (this.namedModels[name] == null) {
        this.namedModels[name] = new ModelContainer();
      }
      modelContainer = this.namedModels[name];
      return modelContainer.on("change", func);
    };

    ViewFirst.prototype.inflate = function(element) {
      var nodes;
      nodes = $("<div>" + element + "</div>");
      this.applySnippets(nodes);
      return nodes.contents();
    };

    ViewFirst.prototype.applySnippets = function(nodes, parentsAttributes) {
      var applySnippetsToSingleNodeAndChildren;
      if (parentsAttributes == null) {
        parentsAttributes = {};
      }
      applySnippetsToSingleNodeAndChildren = this.applySnippetsToSingleNodeAndChildren;
      return nodes.each(function() {
        return applySnippetsToSingleNodeAndChildren($(this), parentsAttributes);
      });
    };

    ViewFirst.prototype.applySnippetsToSingleNodeAndChildren = function(node, parentsAttributes) {
      var nodeAfterSnippetApplied, parentsAndNodesAttributes, snippetFunc, snippetName;
      parentsAndNodesAttributes = this.combine(parentsAttributes, node.data());
      snippetName = node.data('snippet');
      if (snippetName != null) {
        snippetFunc = this.snippets[snippetName];
        if (snippetFunc == null) {
          throw "Unable to find snippet '" + snippetName + "'";
        }
        node.data("snippet", null);
        node.attr("data-snippet", null);
        nodeAfterSnippetApplied = snippetFunc.call(this, node, parentsAndNodesAttributes);
        if (nodeAfterSnippetApplied === null) {
          return node.detach();
        } else {
          if (node !== nodeAfterSnippetApplied) {
            node.replaceWith(nodeAfterSnippetApplied);
          }
          return this.applySnippets(nodeAfterSnippetApplied, parentsAndNodesAttributes);
        }
      } else {
        return this.applySnippets(node.contents(), parentsAndNodesAttributes);
      }
    };

    ViewFirst.prototype.combine = function(parentAttrs, childAttrs) {
      var combinedAttributes, key;
      combinedAttributes = new __extends(Object, childAttrs);
      for (key in parentAttrs) {
        combinedAttributes[key] = parentAttrs[key];
      }
      return combinedAttributes;
    };

    return ViewFirst;

  })(BindHelpers);

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var Events, Property, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("./underscore-dep");

  Events = require("./ViewFirstEvents");

  module.exports = Property = (function(_super) {
    var convert;

    __extends(Property, _super);

    Property.prototype.value = null;

    Property.prototype.isDirty = true;

    function Property(name, type, relationship) {
      this.name = name;
      this.type = type;
      this.addToJson = __bind(this.addToJson, this);

      Property.__super__.constructor.apply(this, arguments);
      if (relationship != null) {
        _.extend(this, new relationship());
      }
    }

    Property.prototype.get = function() {
      return this.value;
    };

    Property.prototype.toString = function() {
      if (this.value == null) {
        return null;
      }
      if (this.value._viewFirstToString != null) {
        return this.value._viewFirstToString();
      }
      throw "Unable to convert " + this.value + " to string";
    };

    Property.prototype.getProperty = function() {
      throw "Cannot get a property for this type of relationship";
    };

    convert = function(value) {
      var converter;
      if (!(value != null) || value instanceof this.type) {
        return value;
      } else {
        converter = this.type._viewFirstConvert;
        if (converter == null) {
          throw "Unable to set type.  There are no converters defined for " + this.type.name;
        }
        return converter(value);
      }
    };

    Property.prototype.set = function(value) {
      var oldValue;
      oldValue = this.value;
      this.isDirty = true;
      this.value = convert.call(this, value);
      if (oldValue !== this.value) {
        return this.trigger("change", oldValue, this.value);
      }
    };

    Property.prototype.setField = function(fieldName, fieldValue) {
      var newValue;
      newValue = new this.type(this.value);
      newValue['set' + fieldName](fieldValue);
      return this.set(newValue);
    };

    Property.prototype.getField = function(fieldName) {
      if (this.value != null) {
        return this.value['get' + fieldName]();
      } else {
        return null;
      }
    };

    Property.prototype.isSet = function() {
      return this.value != null;
    };

    Property.prototype.setFromJson = function(json, clean) {
      this.set(this.type.fromJson(json));
      return this.isDirty = !clean;
    };

    Property.prototype.add = function() {
      throw "Cannot call add on a basic property";
    };

    Property.prototype.removeAll = function() {
      throw "Cannot call removeAll on a basic property";
    };

    Property.prototype.addToJson = function(json) {
      if (this.value != null) {
        return json[this.name] = this.value;
      }
    };

    return Property;

  })(Events);

}).call(this);

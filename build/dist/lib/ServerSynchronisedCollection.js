// Generated by CoffeeScript 1.3.3
(function() {
  var ClientFilteredCollection, Collection, ServerSynchronisedCollection,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Collection = require("./Collection");

  ClientFilteredCollection = require("./ClientFilteredCollection");

  module.exports = ServerSynchronisedCollection = (function(_super) {

    __extends(ServerSynchronisedCollection, _super);

    function ServerSynchronisedCollection(modelType) {
      this.modelType = modelType;
      this.activate = __bind(this.activate, this);

      this.removeFilteredCollection = __bind(this.removeFilteredCollection, this);

      this.filter = __bind(this.filter, this);

      ServerSynchronisedCollection.__super__.constructor.apply(this, arguments);
      this.filteredCollections = [];
    }

    ServerSynchronisedCollection.prototype.filter = function(filter) {
      var filteredCollection, filteredCollectionObject, key, model, _ref;
      filteredCollection = new ClientFilteredCollection(this);
      filteredCollectionObject = {
        collection: filteredCollection,
        filter: filter
      };
      this.filteredCollections.push(filteredCollectionObject);
      _ref = this.instances;
      for (key in _ref) {
        model = _ref[key];
        if (filter(model)) {
          filteredCollection.add(model, true);
        }
      }
      return filteredCollection;
    };

    ServerSynchronisedCollection.prototype.removeFilteredCollection = function() {
      var collections;
      collections = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.filteredCollections = _.filter(this.filteredCollections, function(collObj) {
        return __indexOf.call(collections, collObj) >= 0;
      });
    };

    ServerSynchronisedCollection.prototype.add = function(model, silent) {
      var filteredCollection, _i, _len, _ref,
        _this = this;
      if (silent == null) {
        silent = false;
      }
      if (ServerSynchronisedCollection.__super__.add.apply(this, arguments)) {
        _ref = this.filteredCollections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filteredCollection = _ref[_i];
          if (filteredCollection.filter(model)) {
            filteredCollection.collection.add(model);
          }
        }
        model.on("change", function() {
          var matches, _j, _len1, _ref1, _results;
          _ref1 = _this.filteredCollections;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            filteredCollection = _ref1[_j];
            matches = filteredCollection.filter(model);
            if (matches && !(filteredCollection.collection.instances[model.clientId] != null)) {
              filteredCollection.collection.add(model, silent);
            }
            if (!matches && (filteredCollection.collection.instances[model.clientId] != null)) {
              _results.push(filteredCollection.collection.remove(model));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        return true;
      } else {
        return false;
      }
    };

    ServerSynchronisedCollection.prototype.activate = function() {
      var callbackFunctions,
        _this = this;
      callbackFunctions = {
        create: function(json) {
          var model;
          model = _this.modelType.load(json);
          return _this.add(model);
        },
        update: function(json) {
          return _this.modelType.load(json);
        },
        "delete": function(json) {
          _this.modelType.load(json);
          throw "delete is not yet implemented";
        },
        remove: function(json) {
          var model;
          model = _this.modelType.load(json);
          return _this.remove(model);
        }
      };
      return this.modelType.sync.connectCollection(this, this.modelType.type, callbackFunctions);
    };

    return ServerSynchronisedCollection;

  })(Collection);

}).call(this);

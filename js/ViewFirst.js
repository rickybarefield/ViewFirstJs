// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["View", "ViewFirstRouter", "BindHelpers", "TemplatingSnippets"], function(View, ViewFirstRouter, BindHelpers, TemplatingSnippets) {
    var ViewFirst;
    return ViewFirst = (function(_super) {

      __extends(ViewFirst, _super);

      /*
            namedModelEventListeners contain a map of namedModel name to array of event handlers
      */


      function ViewFirst(indexView, views, namedModels, namedModelEventListeners, router, snippets) {
        this.indexView = indexView;
        this.views = views != null ? views : {};
        this.namedModels = namedModels != null ? namedModels : {};
        this.namedModelEventListeners = namedModelEventListeners != null ? namedModelEventListeners : {};
        this.router = router != null ? router : new ViewFirstRouter(this);
        this.snippets = snippets != null ? snippets : {};
        TemplatingSnippets.add(this);
      }

      ViewFirst.prototype.initialize = function() {
        var _this = this;
        $('script[type="text/view-first-template"]').each(function(id, el) {
          var node, viewName;
          node = $(el);
          console.log("Loading script with id=" + (node.attr('name')));
          viewName = node.attr("name");
          _this.createView(viewName, node.html());
          return _this.router.addRoute(viewName, viewName === _this.indexView);
        });
        return Backbone.history.start();
      };

      ViewFirst.prototype.findView = function(viewId) {
        return this.views[viewId];
      };

      ViewFirst.prototype.renderView = function(viewId) {
        var rendered, view;
        this.currentView = viewId;
        view = this.findView(viewId);
        rendered = view.render();
        return $('body').html(rendered);
      };

      ViewFirst.prototype.navigate = function(viewId) {
        return Backbone.history.navigate(viewId, true);
      };

      ViewFirst.prototype.createView = function(viewId, content) {
        var view;
        view = new View(this, viewId, content);
        this.views[viewId] = view;
        return view;
      };

      ViewFirst.prototype.addSnippet = function(name, func) {
        return this.snippets[name] = func;
      };

      ViewFirst.prototype.setNamedModel = function(name, model, dontSerialize) {
        var eventListenerArray, func, oldModel, _i, _len, _results,
          _this = this;
        if (dontSerialize == null) {
          dontSerialize = false;
        }
        oldModel = this.namedModels[name];
        if (model != null) {
          this.namedModels[name] = model;
          model.constructor.bind("destroy", function() {
            return _this.setNamedModel(name, null);
          });
        } else {
          delete this.namedModels[name];
        }
        console.log("named model set");
        if (!dontSerialize) {
          this.router.updateState();
        }
        eventListenerArray = this.namedModelEventListeners[name];
        if (eventListenerArray != null) {
          _results = [];
          for (_i = 0, _len = eventListenerArray.length; _i < _len; _i++) {
            func = eventListenerArray[_i];
            _results.push(func(oldModel, model));
          }
          return _results;
        }
      };

      ViewFirst.prototype.addNamedModelEventListener = function(name, func) {
        var eventListenerArray;
        eventListenerArray = this.namedModelEventListeners[name];
        if (eventListenerArray == null) {
          eventListenerArray = [];
          this.namedModelEventListeners[name] = eventListenerArray;
        }
        return eventListenerArray.push(func);
      };

      return ViewFirst;

    })(BindHelpers);
  });

}).call(this);

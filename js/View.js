// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery"], function($) {
    return window.View = (function() {

      View.TEXT_NODE = 3;

      function View(viewFirst, viewId, element) {
        this.viewFirst = viewFirst;
        this.viewId = viewId;
        this.element = element;
        this.getElement = __bind(this.getElement, this);

        this.combine = __bind(this.combine, this);

        this.applySnippetsToSingleNodeAndChildren = __bind(this.applySnippetsToSingleNodeAndChildren, this);

        this.applySnippets = __bind(this.applySnippets, this);

      }

      View.prototype.render = function() {
        var nodes;
        nodes = $("<div>" + this.element + "</div>");
        this.applySnippets(nodes);
        return nodes.contents();
      };

      View.prototype.applySnippets = function(nodes, parentsAttributes) {
        var applySnippetsToSingleNodeAndChildren;
        if (parentsAttributes == null) {
          parentsAttributes = {};
        }
        applySnippetsToSingleNodeAndChildren = this.applySnippetsToSingleNodeAndChildren;
        return nodes.each(function() {
          return applySnippetsToSingleNodeAndChildren($(this), parentsAttributes);
        });
      };

      View.prototype.applySnippetsToSingleNodeAndChildren = function(node, parentsAttributes) {
        var nodeAfterSnippetApplied, parentsAndNodesAttributes, snippetFunc, snippetName;
        parentsAndNodesAttributes = this.combine(parentsAttributes, node.data());
        snippetName = node.attr('data-snippet');
        if (snippetName != null) {
          console.log("snippet usage found for " + snippetName);
          snippetFunc = this.viewFirst.snippets[snippetName];
          if (snippetFunc == null) {
            throw "Unable to find snippet '" + snippetName + "'";
          }
          node.removeAttr("data-snippet");
          nodeAfterSnippetApplied = snippetFunc(this.viewFirst, node, parentsAndNodesAttributes);
          if (nodeAfterSnippetApplied === null) {
            return node.detach();
          } else {
            if (node !== nodeAfterSnippetApplied) {
              node.replaceWith(nodeAfterSnippetApplied);
            }
            return this.applySnippets(nodeAfterSnippetApplied, parentsAndNodesAttributes);
          }
        } else {
          return this.applySnippets(node.contents(), parentsAndNodesAttributes);
        }
      };

      View.prototype.combine = function(parentAttrs, childAttrs) {
        var combinedAttributes, key;
        combinedAttributes = new __extends(Object, childAttrs);
        for (key in parentAttrs) {
          combinedAttributes[key] = parentAttrs[key];
        }
        return combinedAttributes;
      };

      View.prototype.getElement = function() {
        return this.element;
      };

      return View;

    })();
  });

}).call(this);
